=begin comment

EVE Swagger Interface

An OpenAPI for EVE Online

OpenAPI spec version: 0.4.2.dev22

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package EVE::ESI::Client::MarketApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use EVE::ESI::Client::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'EVE::ESI::Client::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = EVE::ESI::Client::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_markets_groups
#
# Get item groups
# 
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_markets_groups' } = { 
    	summary => 'Get item groups',
        params => $params,
        returns => 'ARRAY[int]',
        };
}
# @return ARRAY[int]
#
sub get_markets_groups {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/markets/groups/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[int]', $response);
    return $_response_object;
}

#
# get_markets_groups_market_group_id
#
# Get item group information
# 
# @param int $market_group_id An Eve item group ID (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $language Language to use in the response (optional, default to en-us)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'market_group_id' => {
        data_type => 'int',
        description => 'An Eve item group ID',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'language' => {
        data_type => 'string',
        description => 'Language to use in the response',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_markets_groups_market_group_id' } = { 
    	summary => 'Get item group information',
        params => $params,
        returns => 'GetMarketsGroupsMarketGroupIdOk',
        };
}
# @return GetMarketsGroupsMarketGroupIdOk
#
sub get_markets_groups_market_group_id {
    my ($self, %args) = @_;

    # verify the required parameter 'market_group_id' is set
    unless (exists $args{'market_group_id'}) {
      croak("Missing the required parameter 'market_group_id' when calling get_markets_groups_market_group_id");
    }

    # parse inputs
    my $_resource_path = '/markets/groups/{market_group_id}/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'market_group_id'}) {
        my $_base_variable = "{" . "market_group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'market_group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMarketsGroupsMarketGroupIdOk', $response);
    return $_response_object;
}

#
# get_markets_prices
#
# List market prices
# 
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_markets_prices' } = { 
    	summary => 'List market prices',
        params => $params,
        returns => 'ARRAY[GetMarketsPrices200Ok]',
        };
}
# @return ARRAY[GetMarketsPrices200Ok]
#
sub get_markets_prices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/markets/prices/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetMarketsPrices200Ok]', $response);
    return $_response_object;
}

#
# get_markets_region_id_history
#
# List historical market statistics in a region
# 
# @param int $region_id Return statistics in this region (required)
# @param int $type_id Return statistics for this type (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'region_id' => {
        data_type => 'int',
        description => 'Return statistics in this region',
        required => '1',
    },
    'type_id' => {
        data_type => 'int',
        description => 'Return statistics for this type',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_markets_region_id_history' } = { 
    	summary => 'List historical market statistics in a region',
        params => $params,
        returns => 'ARRAY[GetMarketsRegionIdHistory200Ok]',
        };
}
# @return ARRAY[GetMarketsRegionIdHistory200Ok]
#
sub get_markets_region_id_history {
    my ($self, %args) = @_;

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_markets_region_id_history");
    }

    # verify the required parameter 'type_id' is set
    unless (exists $args{'type_id'}) {
      croak("Missing the required parameter 'type_id' when calling get_markets_region_id_history");
    }

    # parse inputs
    my $_resource_path = '/markets/{region_id}/history/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'type_id'}) {
        $query_params->{'type_id'} = $self->{api_client}->to_query_value($args{'type_id'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'region_id'}) {
        my $_base_variable = "{" . "region_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'region_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetMarketsRegionIdHistory200Ok]', $response);
    return $_response_object;
}

#
# get_markets_region_id_orders
#
# List orders in a region
# 
# @param string $order_type Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.  (required)
# @param int $region_id Return orders in this region (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param int $page Which page to query, only used for querying without type_id. Starting at 1  (optional, default to 1)
# @param int $type_id Return orders only for this type (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'order_type' => {
        data_type => 'string',
        description => 'Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. ',
        required => '1',
    },
    'region_id' => {
        data_type => 'int',
        description => 'Return orders in this region',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Which page to query, only used for querying without type_id. Starting at 1 ',
        required => '0',
    },
    'type_id' => {
        data_type => 'int',
        description => 'Return orders only for this type',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_markets_region_id_orders' } = { 
    	summary => 'List orders in a region',
        params => $params,
        returns => 'ARRAY[GetMarketsRegionIdOrders200Ok]',
        };
}
# @return ARRAY[GetMarketsRegionIdOrders200Ok]
#
sub get_markets_region_id_orders {
    my ($self, %args) = @_;

    # verify the required parameter 'order_type' is set
    unless (exists $args{'order_type'}) {
      croak("Missing the required parameter 'order_type' when calling get_markets_region_id_orders");
    }

    # verify the required parameter 'region_id' is set
    unless (exists $args{'region_id'}) {
      croak("Missing the required parameter 'region_id' when calling get_markets_region_id_orders");
    }

    # parse inputs
    my $_resource_path = '/markets/{region_id}/orders/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'order_type'}) {
        $query_params->{'order_type'} = $self->{api_client}->to_query_value($args{'order_type'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'type_id'}) {
        $query_params->{'type_id'} = $self->{api_client}->to_query_value($args{'type_id'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'region_id'}) {
        my $_base_variable = "{" . "region_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'region_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetMarketsRegionIdOrders200Ok]', $response);
    return $_response_object;
}

#
# get_markets_structures_structure_id
#
# List orders in a structure
# 
# @param int $structure_id Return orders in this structure (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param int $page Which page to query, starting at 1 (optional, default to 1)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'structure_id' => {
        data_type => 'int',
        description => 'Return orders in this structure',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Which page to query, starting at 1',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_markets_structures_structure_id' } = { 
    	summary => 'List orders in a structure',
        params => $params,
        returns => 'ARRAY[GetMarketsStructuresStructureId200Ok]',
        };
}
# @return ARRAY[GetMarketsStructuresStructureId200Ok]
#
sub get_markets_structures_structure_id {
    my ($self, %args) = @_;

    # verify the required parameter 'structure_id' is set
    unless (exists $args{'structure_id'}) {
      croak("Missing the required parameter 'structure_id' when calling get_markets_structures_structure_id");
    }

    # parse inputs
    my $_resource_path = '/markets/structures/{structure_id}/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'structure_id'}) {
        my $_base_variable = "{" . "structure_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'structure_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetMarketsStructuresStructureId200Ok]', $response);
    return $_response_object;
}

1;

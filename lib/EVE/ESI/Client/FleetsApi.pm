=begin comment

EVE Swagger Interface

An OpenAPI for EVE Online

OpenAPI spec version: 0.4.2.dev22

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package EVE::ESI::Client::FleetsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use EVE::ESI::Client::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'EVE::ESI::Client::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = EVE::ESI::Client::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# delete_fleets_fleet_id_members_member_id
#
# Kick fleet member
# 
# @param int $fleet_id ID for a fleet (required)
# @param int $member_id The character ID of a member in this fleet (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'member_id' => {
        data_type => 'int',
        description => 'The character ID of a member in this fleet',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_fleets_fleet_id_members_member_id' } = { 
    	summary => 'Kick fleet member',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_fleets_fleet_id_members_member_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling delete_fleets_fleet_id_members_member_id");
    }

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling delete_fleets_fleet_id_members_member_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/members/{member_id}/';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "member_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_fleets_fleet_id_squads_squad_id
#
# Delete fleet squad
# 
# @param int $fleet_id ID for a fleet (required)
# @param int $squad_id The squad to delete (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'squad_id' => {
        data_type => 'int',
        description => 'The squad to delete',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_fleets_fleet_id_squads_squad_id' } = { 
    	summary => 'Delete fleet squad',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_fleets_fleet_id_squads_squad_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling delete_fleets_fleet_id_squads_squad_id");
    }

    # verify the required parameter 'squad_id' is set
    unless (exists $args{'squad_id'}) {
      croak("Missing the required parameter 'squad_id' when calling delete_fleets_fleet_id_squads_squad_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/squads/{squad_id}/';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'squad_id'}) {
        my $_base_variable = "{" . "squad_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'squad_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_fleets_fleet_id_wings_wing_id
#
# Delete fleet wing
# 
# @param int $fleet_id ID for a fleet (required)
# @param int $wing_id The wing to delete (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'wing_id' => {
        data_type => 'int',
        description => 'The wing to delete',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_fleets_fleet_id_wings_wing_id' } = { 
    	summary => 'Delete fleet wing',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_fleets_fleet_id_wings_wing_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling delete_fleets_fleet_id_wings_wing_id");
    }

    # verify the required parameter 'wing_id' is set
    unless (exists $args{'wing_id'}) {
      croak("Missing the required parameter 'wing_id' when calling delete_fleets_fleet_id_wings_wing_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/wings/{wing_id}/';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'wing_id'}) {
        my $_base_variable = "{" . "wing_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'wing_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_fleets_fleet_id
#
# Get fleet information
# 
# @param int $fleet_id ID for a fleet (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_fleets_fleet_id' } = { 
    	summary => 'Get fleet information',
        params => $params,
        returns => 'GetFleetsFleetIdOk',
        };
}
# @return GetFleetsFleetIdOk
#
sub get_fleets_fleet_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling get_fleets_fleet_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetFleetsFleetIdOk', $response);
    return $_response_object;
}

#
# get_fleets_fleet_id_members
#
# Get fleet members
# 
# @param int $fleet_id ID for a fleet (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $language Language to use in the response (optional, default to en-us)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'language' => {
        data_type => 'string',
        description => 'Language to use in the response',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_fleets_fleet_id_members' } = { 
    	summary => 'Get fleet members',
        params => $params,
        returns => 'ARRAY[GetFleetsFleetIdMembers200Ok]',
        };
}
# @return ARRAY[GetFleetsFleetIdMembers200Ok]
#
sub get_fleets_fleet_id_members {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling get_fleets_fleet_id_members");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/members/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetFleetsFleetIdMembers200Ok]', $response);
    return $_response_object;
}

#
# get_fleets_fleet_id_wings
#
# Get fleet wings
# 
# @param int $fleet_id ID for a fleet (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $language Language to use in the response (optional, default to en-us)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'language' => {
        data_type => 'string',
        description => 'Language to use in the response',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_fleets_fleet_id_wings' } = { 
    	summary => 'Get fleet wings',
        params => $params,
        returns => 'ARRAY[GetFleetsFleetIdWings200Ok]',
        };
}
# @return ARRAY[GetFleetsFleetIdWings200Ok]
#
sub get_fleets_fleet_id_wings {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling get_fleets_fleet_id_wings");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/wings/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetFleetsFleetIdWings200Ok]', $response);
    return $_response_object;
}

#
# post_fleets_fleet_id_members
#
# Create fleet invitation
# 
# @param int $fleet_id ID for a fleet (required)
# @param PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'invitation' => {
        data_type => 'PostFleetsFleetIdMembersInvitation',
        description => 'Details of the invitation',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_fleets_fleet_id_members' } = { 
    	summary => 'Create fleet invitation',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_fleets_fleet_id_members {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling post_fleets_fleet_id_members");
    }

    # verify the required parameter 'invitation' is set
    unless (exists $args{'invitation'}) {
      croak("Missing the required parameter 'invitation' when calling post_fleets_fleet_id_members");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/members/';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'invitation'}) {
        $_body_data = $args{'invitation'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_fleets_fleet_id_wings
#
# Create fleet wing
# 
# @param int $fleet_id ID for a fleet (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_fleets_fleet_id_wings' } = { 
    	summary => 'Create fleet wing',
        params => $params,
        returns => 'PostFleetsFleetIdWingsCreated',
        };
}
# @return PostFleetsFleetIdWingsCreated
#
sub post_fleets_fleet_id_wings {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling post_fleets_fleet_id_wings");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/wings/';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PostFleetsFleetIdWingsCreated', $response);
    return $_response_object;
}

#
# post_fleets_fleet_id_wings_wing_id_squads
#
# Create fleet squad
# 
# @param int $fleet_id ID for a fleet (required)
# @param int $wing_id The wing_id to create squad in (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'wing_id' => {
        data_type => 'int',
        description => 'The wing_id to create squad in',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_fleets_fleet_id_wings_wing_id_squads' } = { 
    	summary => 'Create fleet squad',
        params => $params,
        returns => 'PostFleetsFleetIdWingsWingIdSquadsCreated',
        };
}
# @return PostFleetsFleetIdWingsWingIdSquadsCreated
#
sub post_fleets_fleet_id_wings_wing_id_squads {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling post_fleets_fleet_id_wings_wing_id_squads");
    }

    # verify the required parameter 'wing_id' is set
    unless (exists $args{'wing_id'}) {
      croak("Missing the required parameter 'wing_id' when calling post_fleets_fleet_id_wings_wing_id_squads");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/wings/{wing_id}/squads/';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'wing_id'}) {
        my $_base_variable = "{" . "wing_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'wing_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PostFleetsFleetIdWingsWingIdSquadsCreated', $response);
    return $_response_object;
}

#
# put_fleets_fleet_id
#
# Update fleet
# 
# @param int $fleet_id ID for a fleet (required)
# @param PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'new_settings' => {
        data_type => 'PutFleetsFleetIdNewSettings',
        description => 'What to update for this fleet',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_fleets_fleet_id' } = { 
    	summary => 'Update fleet',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub put_fleets_fleet_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling put_fleets_fleet_id");
    }

    # verify the required parameter 'new_settings' is set
    unless (exists $args{'new_settings'}) {
      croak("Missing the required parameter 'new_settings' when calling put_fleets_fleet_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'new_settings'}) {
        $_body_data = $args{'new_settings'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# put_fleets_fleet_id_members_member_id
#
# Move fleet member
# 
# @param int $fleet_id ID for a fleet (required)
# @param int $member_id The character ID of a member in this fleet (required)
# @param PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'member_id' => {
        data_type => 'int',
        description => 'The character ID of a member in this fleet',
        required => '1',
    },
    'movement' => {
        data_type => 'PutFleetsFleetIdMembersMemberIdMovement',
        description => 'Details of the invitation',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_fleets_fleet_id_members_member_id' } = { 
    	summary => 'Move fleet member',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub put_fleets_fleet_id_members_member_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling put_fleets_fleet_id_members_member_id");
    }

    # verify the required parameter 'member_id' is set
    unless (exists $args{'member_id'}) {
      croak("Missing the required parameter 'member_id' when calling put_fleets_fleet_id_members_member_id");
    }

    # verify the required parameter 'movement' is set
    unless (exists $args{'movement'}) {
      croak("Missing the required parameter 'movement' when calling put_fleets_fleet_id_members_member_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/members/{member_id}/';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'member_id'}) {
        my $_base_variable = "{" . "member_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'member_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'movement'}) {
        $_body_data = $args{'movement'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# put_fleets_fleet_id_squads_squad_id
#
# Rename fleet squad
# 
# @param int $fleet_id ID for a fleet (required)
# @param PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
# @param int $squad_id The squad to rename (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'naming' => {
        data_type => 'PutFleetsFleetIdSquadsSquadIdNaming',
        description => 'New name of the squad',
        required => '1',
    },
    'squad_id' => {
        data_type => 'int',
        description => 'The squad to rename',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_fleets_fleet_id_squads_squad_id' } = { 
    	summary => 'Rename fleet squad',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub put_fleets_fleet_id_squads_squad_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling put_fleets_fleet_id_squads_squad_id");
    }

    # verify the required parameter 'naming' is set
    unless (exists $args{'naming'}) {
      croak("Missing the required parameter 'naming' when calling put_fleets_fleet_id_squads_squad_id");
    }

    # verify the required parameter 'squad_id' is set
    unless (exists $args{'squad_id'}) {
      croak("Missing the required parameter 'squad_id' when calling put_fleets_fleet_id_squads_squad_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/squads/{squad_id}/';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'squad_id'}) {
        my $_base_variable = "{" . "squad_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'squad_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'naming'}) {
        $_body_data = $args{'naming'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# put_fleets_fleet_id_wings_wing_id
#
# Rename fleet wing
# 
# @param int $fleet_id ID for a fleet (required)
# @param PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
# @param int $wing_id The wing to rename (required)
# @param string $datasource The server name you would like data from (optional, default to tranquility)
# @param string $token Access token to use, if preferred over a header (optional)
# @param string $user_agent Client identifier, takes precedence over headers (optional)
# @param string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
{
    my $params = {
    'fleet_id' => {
        data_type => 'int',
        description => 'ID for a fleet',
        required => '1',
    },
    'naming' => {
        data_type => 'PutFleetsFleetIdWingsWingIdNaming',
        description => 'New name of the wing',
        required => '1',
    },
    'wing_id' => {
        data_type => 'int',
        description => 'The wing to rename',
        required => '1',
    },
    'datasource' => {
        data_type => 'string',
        description => 'The server name you would like data from',
        required => '0',
    },
    'token' => {
        data_type => 'string',
        description => 'Access token to use, if preferred over a header',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over headers',
        required => '0',
    },
    'x_user_agent' => {
        data_type => 'string',
        description => 'Client identifier, takes precedence over User-Agent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_fleets_fleet_id_wings_wing_id' } = { 
    	summary => 'Rename fleet wing',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub put_fleets_fleet_id_wings_wing_id {
    my ($self, %args) = @_;

    # verify the required parameter 'fleet_id' is set
    unless (exists $args{'fleet_id'}) {
      croak("Missing the required parameter 'fleet_id' when calling put_fleets_fleet_id_wings_wing_id");
    }

    # verify the required parameter 'naming' is set
    unless (exists $args{'naming'}) {
      croak("Missing the required parameter 'naming' when calling put_fleets_fleet_id_wings_wing_id");
    }

    # verify the required parameter 'wing_id' is set
    unless (exists $args{'wing_id'}) {
      croak("Missing the required parameter 'wing_id' when calling put_fleets_fleet_id_wings_wing_id");
    }

    # parse inputs
    my $_resource_path = '/fleets/{fleet_id}/wings/{wing_id}/';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'datasource'}) {
        $query_params->{'datasource'} = $self->{api_client}->to_query_value($args{'datasource'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'x_user_agent'}) {
        $header_params->{'X-User-Agent'} = $self->{api_client}->to_header_value($args{'x_user_agent'});
    }

    # path params
    if ( exists $args{'fleet_id'}) {
        my $_base_variable = "{" . "fleet_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fleet_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'wing_id'}) {
        my $_base_variable = "{" . "wing_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'wing_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'naming'}) {
        $_body_data = $args{'naming'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(evesso )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
